// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "indie-developers",
            "email": "shorcutbot.indiedevelopers@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user": {
            "get": {
                "description": "Get all users registered in our database",
                "tags": [
                    "User Controller"
                ],
                "summary": "get-users",
                "operationId": "get-users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "requester name",
                        "name": "x-application-id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID request",
                        "name": "x-request-id",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.GetUsersResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "x-codeSamples": [
                    {
                        "label": "get all users",
                        "lang": "curl",
                        "source": "curl --location 'http://localhost:8080/api/v1/template/user' \\\n--header 'Content-Type: application/json' \\\n--header 'x-application-id: Cristian Morales' \\\n--header 'x-request-id;' \\\n--data ''"
                    }
                ]
            },
            "post": {
                "description": "Create a new user",
                "tags": [
                    "User Controller"
                ],
                "summary": "create-user",
                "operationId": "create-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "requester name",
                        "name": "x-application-id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UUID request",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "user has been created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "x-codeSamples": [
                    {
                        "label": "create a new user",
                        "lang": "curl",
                        "source": "curl --location 'http://localhost:8080/api/v1/template/user' \\\n--header 'Content-Type: application/json' \\\n--header 'x-application-id: Cristian Morales' \\\n--header 'x-request-id;' \\\n--data-raw '{\n    \"name\": \"john\",\n    \"last_name\": \"smith\",\n    \"email\":\"email5@email.com\"\n}'"
                    }
                ]
            }
        }
    },
    "definitions": {
        "requests.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "last_name",
                "name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "responses.GetUsersResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "",
	BasePath:         "/api/v1/template/",
	Schemes:          []string{},
	Title:            "Go API Template",
	Description:      "this is a template created with hexagonal architecture for Golang APIs, it includes multiple cases using popular web frameworks like Gin or Echo, and gRPC. For more information contact us to our email.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
