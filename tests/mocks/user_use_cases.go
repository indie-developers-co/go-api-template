// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "gitlab.com/indie-developers/go-api-echo-template/internal/domains/models"
)

// UserUseCases is an autogenerated mock type for the UserUseCases type
type UserUseCases struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserUseCases) Create(ctx context.Context, user models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *UserUseCases) GetAll(ctx context.Context) ([]models.User, error) {
	ret := _m.Called(ctx)

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUseCases interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUseCases creates a new instance of UserUseCases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUseCases(t mockConstructorTestingTNewUserUseCases) *UserUseCases {
	mock := &UserUseCases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
